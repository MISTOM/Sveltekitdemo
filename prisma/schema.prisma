generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int              @id @default(autoincrement())
  name          String           @db.VarChar(255)
  email         String           @unique @db.VarChar(255)
  password      String           @db.VarChar(255)
  phoneNumber   String?          @unique @db.VarChar(255)
  accountNumber String?          @unique @db.VarChar(100)
  bankName      String?          @db.VarChar(255)
  branchName    String?          @db.VarChar(255)
  roleId        Int
  role          Role             @relation(fields: [roleId], references: [id])
  isApproved    Boolean          @default(false)
  isVerified    Boolean          @default(false)
  products      Product[]
  orders        ProductOnOrder[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @default(now()) @updatedAt
}

model Product {
  id          Int               @id @default(autoincrement())
  name        String            @db.VarChar(255)
  description String?           @db.Text
  shoeSize    Int               @default(0)
  price       Int
  quantity    Int               @default(0)
  sellerId    Int
  seller      User              @relation(fields: [sellerId], references: [id])
  isApproved  Boolean           @default(false)
  orders      ProductOnOrder[]
  images      Image[]
  categoryies ProductCategory[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String            @db.VarChar(255)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  products  ProductCategory[]
}

model ProductCategory {
  productId  Int
  categoryId Int
  product    Product?  @relation(fields: [productId], references: [id])
  category   Category? @relation(fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt

  @@id([productId, categoryId])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String   @db.Text
  publicId  String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// there is no buyer account hence the buyerid is not needed
model Orders {
  id          Int              @id @default(autoincrement())
  buyerName   String           @db.VarChar(255)
  buyerEmail  String           @db.VarChar(255)
  buyerPhone  String           @db.VarChar(255)
  totalPrice  Int
  isDelivered Boolean          @default(false)
  products    ProductOnOrder[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProductOnOrder {
  orderId   Int
  productId Int
  quantity  Int
  sellerId  Int
  seller    User     @relation(fields: [sellerId], references: [id])
  order     Orders   @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([orderId, productId])
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  user User[]
}
